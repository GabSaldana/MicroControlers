
AVRASM ver. 2.1.30  C:\Users\Gabriela\Documents\Escuela\3er nivel\Microcontroladores\termometro\List\termometro.asm Tue May 17 11:34:22 2016

C:\Users\Gabriela\Documents\Escuela\3er nivel\Microcontroladores\termometro\List\termometro.asm(1057): warning: Register r4 already defined by the .DEF directive
C:\Users\Gabriela\Documents\Escuela\3er nivel\Microcontroladores\termometro\List\termometro.asm(1058): warning: Register r6 already defined by the .DEF directive
C:\Users\Gabriela\Documents\Escuela\3er nivel\Microcontroladores\termometro\List\termometro.asm(1059): warning: Register r8 already defined by the .DEF directive
C:\Users\Gabriela\Documents\Escuela\3er nivel\Microcontroladores\termometro\List\termometro.asm(1060): warning: Register r10 already defined by the .DEF directive
C:\Users\Gabriela\Documents\Escuela\3er nivel\Microcontroladores\termometro\List\termometro.asm(1061): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8535L
                 ;Program type             : Application
                 ;Clock frequency          : 1.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 128 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 607
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _far=R4
                 	.DEF _cn=R6
                 	.DEF _f=R8
                 	.DEF _var=R10
                 	.DEF _var2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c025      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 _0x3:
000016 063f
000017 4f5b
000018 6d66
000019 077c      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7C,0x7
00001a 6f7f      	.DB  0x7F,0x6F
                 _0x19:
00001b 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00001c 0001      	.DW  0x01
00001d 0002      	.DW  0x02
00001e 002a      	.DW  __REG_BIT_VARS*2
                 
00001f 000a      	.DW  0x0A
000020 00e0      	.DW  _tabla7segmentos
000021 002c      	.DW  _0x3*2
                 
000022 0002      	.DW  0x02
000023 0004      	.DW  0x04
000024 0036      	.DW  _0x19*2
                 
                 _0xFFFFFFFF:
000025 0000      	.DW  0
                 
                 __RESET:
000026 94f8      	CLI
000027 27ee      	CLR  R30
000028 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000029 e0f1      	LDI  R31,1
00002a bffb      	OUT  GICR,R31
00002b bfeb      	OUT  GICR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002d e1f8      	LDI  R31,0x18
00002e bdf1      	OUT  WDTCR,R31
00002f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000030 e08d      	LDI  R24,(14-2)+1
000031 e0a2      	LDI  R26,2
000032 27bb      	CLR  R27
                 __CLEAR_REG:
000033 93ed      	ST   X+,R30
000034 958a      	DEC  R24
000035 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000036 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000037 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000038 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000039 93ed      	ST   X+,R30
00003a 9701      	SBIW R24,1
00003b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003c e3e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003e 9185      	LPM  R24,Z+
00003f 9195      	LPM  R25,Z+
000040 9700      	SBIW R24,0
000041 f061      	BREQ __GLOBAL_INI_END
000042 91a5      	LPM  R26,Z+
000043 91b5      	LPM  R27,Z+
000044 9005      	LPM  R0,Z+
000045 9015      	LPM  R1,Z+
000046 01bf      	MOVW R22,R30
000047 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000048 9005      	LPM  R0,Z+
000049 920d      	ST   X+,R0
00004a 9701      	SBIW R24,1
00004b f7e1      	BRNE __GLOBAL_INI_LOOP
00004c 01fb      	MOVW R30,R22
00004d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004f bfed      	OUT  SPL,R30
000050 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000051 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000052 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000053 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000054 c00d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#define ADC_VREF_TYPE 0x60
                 ;
                 ;#define boton PINB.0
                 ;
                 ;const char tabla7segmentos [10]={0x3F,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
                 
                 	.DSEG
                 ;unsigned int far=0;
                 ;unsigned int cn;
                 ;unsigned int f;
                 ;unsigned int var;
                 ;unsigned int var2;
                 ;unsigned int var3;
                 ;bit btna;
                 ;bit btnp;
                 ;
                 ;//ADC
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _read_adc:
                 ; 0000 0014 
                 ; 0000 0015 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
000055 81e8      	LD   R30,Y
000056 66e0      	ORI  R30,LOW(0x60)
000057 b9e7      	OUT  0x7,R30
                 ; 0000 0016 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0017 delay_us(10);
                +
000058 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000059 958a     +DEC R24
00005a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0018 // Start the AD conversion
                 ; 0000 0019 ADCSRA|=0x40;
00005b 9a36      	SBI  0x6,6
                 ; 0000 001A // Wait for the AD conversion to complete
                 ; 0000 001B while ((ADCSRA & 0x10)==0);
                 _0x4:
00005c 9b34      	SBIS 0x6,4
00005d cffe      	RJMP _0x4
                 ; 0000 001C ADCSRA|=0x10;
00005e 9a34      	SBI  0x6,4
                 ; 0000 001D return ADCH;
00005f b1e5      	IN   R30,0x5
000060 9621      	ADIW R28,1
000061 9508      	RET
                 ; 0000 001E 
                 ; 0000 001F }
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 _main:
                 ; 0000 0023 
                 ; 0000 0024 PORTA=0x00;
000062 e0e0      	LDI  R30,LOW(0)
000063 bbeb      	OUT  0x1B,R30
                 ; 0000 0025 DDRA=0x00;//todos entrada para el ADC
000064 bbea      	OUT  0x1A,R30
                 ; 0000 0026 
                 ; 0000 0027 PORTC=0x00;
000065 bbe5      	OUT  0x15,R30
                 ; 0000 0028 DDRC=0xFF;//salida hacia los display
000066 efef      	LDI  R30,LOW(255)
000067 bbe4      	OUT  0x14,R30
                 ; 0000 0029 
                 ; 0000 002A PORTD=0x00;
000068 e0e0      	LDI  R30,LOW(0)
000069 bbe2      	OUT  0x12,R30
                 ; 0000 002B DDRD=0xFF;//salidas hacia los transistores
00006a efef      	LDI  R30,LOW(255)
00006b bbe1      	OUT  0x11,R30
                 ; 0000 002C 
                 ; 0000 002D PORTB=0xFF;//con pull
00006c bbe8      	OUT  0x18,R30
                 ; 0000 002E DDRB=0x00;//push
00006d e0e0      	LDI  R30,LOW(0)
00006e bbe7      	OUT  0x17,R30
                 ; 0000 002F 
                 ; 0000 0030 
                 ; 0000 0031 TCCR0=0x00;
00006f bfe3      	OUT  0x33,R30
                 ; 0000 0032 TCNT0=0x00;
000070 bfe2      	OUT  0x32,R30
                 ; 0000 0033 OCR0=0x00;
000071 bfec      	OUT  0x3C,R30
                 ; 0000 0034 TCCR1A=0x00;
000072 bdef      	OUT  0x2F,R30
                 ; 0000 0035 TCCR1B=0x00;
000073 bdee      	OUT  0x2E,R30
                 ; 0000 0036 TCNT1H=0x00;
000074 bded      	OUT  0x2D,R30
                 ; 0000 0037 TCNT1L=0x00;
000075 bdec      	OUT  0x2C,R30
                 ; 0000 0038 ICR1H=0x00;
000076 bde7      	OUT  0x27,R30
                 ; 0000 0039 ICR1L=0x00;
000077 bde6      	OUT  0x26,R30
                 ; 0000 003A OCR1AH=0x00;
000078 bdeb      	OUT  0x2B,R30
                 ; 0000 003B OCR1AL=0x00;
000079 bdea      	OUT  0x2A,R30
                 ; 0000 003C OCR1BH=0x00;
00007a bde9      	OUT  0x29,R30
                 ; 0000 003D OCR1BL=0x00;
00007b bde8      	OUT  0x28,R30
                 ; 0000 003E ASSR=0x00;
00007c bde2      	OUT  0x22,R30
                 ; 0000 003F TCCR2=0x00;
00007d bde5      	OUT  0x25,R30
                 ; 0000 0040 TCNT2=0x00;
00007e bde4      	OUT  0x24,R30
                 ; 0000 0041 OCR2=0x00;
00007f bde3      	OUT  0x23,R30
                 ; 0000 0042 MCUCR=0x00;
000080 bfe5      	OUT  0x35,R30
                 ; 0000 0043 MCUCSR=0x00;
000081 bfe4      	OUT  0x34,R30
                 ; 0000 0044 TIMSK=0x00;
000082 bfe9      	OUT  0x39,R30
                 ; 0000 0045 UCSRB=0x00;
000083 b9ea      	OUT  0xA,R30
                 ; 0000 0046 ACSR=0x80;
000084 e8e0      	LDI  R30,LOW(128)
000085 b9e8      	OUT  0x8,R30
                 ; 0000 0047 SFIOR=0x00;
000086 e0e0      	LDI  R30,LOW(0)
000087 bfe0      	OUT  0x30,R30
                 ; 0000 0048 ADMUX=ADC_VREF_TYPE & 0xff;
000088 e6e0      	LDI  R30,LOW(96)
000089 b9e7      	OUT  0x7,R30
                 ; 0000 0049 ADCSRA=0x81;
00008a e8e1      	LDI  R30,LOW(129)
00008b b9e6      	OUT  0x6,R30
                 ; 0000 004A SFIOR&=0xEF;
00008c b7e0      	IN   R30,0x30
00008d 7eef      	ANDI R30,0xEF
00008e bfe0      	OUT  0x30,R30
                 ; 0000 004B SPCR=0x00;
00008f e0e0      	LDI  R30,LOW(0)
000090 b9ed      	OUT  0xD,R30
                 ; 0000 004C TWCR=0x00;
000091 bfe6      	OUT  0x36,R30
                 ; 0000 004D 
                 ; 0000 004E while (1)
                 _0x7:
                 ; 0000 004F       {
                 ; 0000 0050 
                 ; 0000 0051 
                 ; 0000 0052        // Guardar cambio de T
                 ; 0000 0053         if(boton == 0)//detectamos el cero producido por el objeto que obstruye
000092 99b0      	SBIC 0x16,0
000093 c002      	RJMP _0xA
                 ; 0000 0054                 btna=0;
000094 94e8      	CLT
000095 c001      	RJMP _0x17
                 ; 0000 0055             else
                 _0xA:
                 ; 0000 0056                 btna=1;
000096 9468      	SET
                 _0x17:
000097 f820      	BLD  R2,0
                 ; 0000 0057 
                 ; 0000 0058       if ((btnp==1)&&(btna==0)) //hubo cambio de flanco de 1 a 0
000098 fe21      	SBRS R2,1
000099 c005      	RJMP _0xD
00009a e0a0      	LDI  R26,0
00009b fc20      	SBRC R2,0
00009c e0a1      	LDI  R26,1
00009d 30a0      	CPI  R26,LOW(0x0)
00009e f009      	BREQ _0xE
                 _0xD:
00009f c009      	RJMP _0xC
                 _0xE:
                 ; 0000 0059         {
                 ; 0000 005A            if(far==0){
0000a0 2c04      	MOV  R0,R4
0000a1 2805      	OR   R0,R5
0000a2 f421      	BRNE _0xF
                 ; 0000 005B             far=1;
0000a3 e0e1      	LDI  R30,LOW(1)
0000a4 e0f0      	LDI  R31,HIGH(1)
0000a5 012f      	MOVW R4,R30
                 ; 0000 005C            }else{
0000a6 c002      	RJMP _0x10
                 _0xF:
                 ; 0000 005D             far=0;
0000a7 2444      	CLR  R4
0000a8 2455      	CLR  R5
                 ; 0000 005E            }
                 _0x10:
                 ; 0000 005F         }
                 ; 0000 0060 
                 ; 0000 0061         if ((btnp==0)&&(btna==1)){ //hubo cambio de flanco de 0 a 1
                 _0xC:
0000a9 e0a0      	LDI  R26,0
0000aa fc21      	SBRC R2,1
0000ab e0a1      	LDI  R26,1
                 ; 0000 0062             //delay_ms(40); //Se coloca retardo de 40mS para eliminar rebotes
                 ; 0000 0063             }
                 ; 0000 0064 
                 ; 0000 0065         btnp=btna;
0000ac fa20      	BST  R2,0
0000ad f821      	BLD  R2,1
                 ; 0000 0066         //Para celsius
                 ; 0000 0067         cn=(5.0 * read_adc(0) * 100.0)/256;
0000ae e0e0      	LDI  R30,LOW(0)
0000af 93ea      	ST   -Y,R30
0000b0 dfa4      	RCALL _read_adc
0000b1 e0f0      	LDI  R31,0
0000b2 d1ec      	RCALL __CWD1
0000b3 d0cd      	RCALL __CDF1
                +
0000b4 e0a0     +LDI R26 , LOW ( 0x40A00000 )
0000b5 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0000b6 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0000b7 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0000b8 d14b      	RCALL __MULF12
                +
0000b9 e0a0     +LDI R26 , LOW ( 0x42C80000 )
0000ba e0b0     +LDI R27 , HIGH ( 0x42C80000 )
0000bb ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
0000bc e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
0000bd d146      	RCALL __MULF12
0000be 01df      	MOVW R26,R30
0000bf 01cb      	MOVW R24,R22
                +
0000c0 e0e0     +LDI R30 , LOW ( 0x43800000 )
0000c1 e0f0     +LDI R31 , HIGH ( 0x43800000 )
0000c2 e860     +LDI R22 , BYTE3 ( 0x43800000 )
0000c3 e473     +LDI R23 , BYTE4 ( 0x43800000 )
                 	__GETD1N 0x43800000
0000c4 d18d      	RCALL __DIVF21
0000c5 d082      	RCALL __CFD1U
0000c6 013f      	MOVW R6,R30
                 ; 0000 0068 
                 ; 0000 0069 
                 ; 0000 006A        /* if(cn>=50){
                 ; 0000 006B             cn=50;
                 ; 0000 006C         }*/
                 ; 0000 006D 
                 ; 0000 006E       if(far==1){
0000c7 e0e1      	LDI  R30,LOW(1)
0000c8 e0f0      	LDI  R31,HIGH(1)
0000c9 15e4      	CP   R30,R4
0000ca 05f5      	CPC  R31,R5
0000cb f4e9      	BRNE _0x14
                 ; 0000 006F          f = ((cn*1.8)+32);
0000cc 01f3      	MOVW R30,R6
0000cd 2766      	CLR  R22
0000ce 2777      	CLR  R23
0000cf d0b1      	RCALL __CDF1
                +
0000d0 e6a6     +LDI R26 , LOW ( 0x3FE66666 )
0000d1 e6b6     +LDI R27 , HIGH ( 0x3FE66666 )
0000d2 ee86     +LDI R24 , BYTE3 ( 0x3FE66666 )
0000d3 e39f     +LDI R25 , BYTE4 ( 0x3FE66666 )
                 	__GETD2N 0x3FE66666
0000d4 d12f      	RCALL __MULF12
                +
0000d5 e0a0     +LDI R26 , LOW ( 0x42000000 )
0000d6 e0b0     +LDI R27 , HIGH ( 0x42000000 )
0000d7 e080     +LDI R24 , BYTE3 ( 0x42000000 )
0000d8 e492     +LDI R25 , BYTE4 ( 0x42000000 )
                 	__GETD2N 0x42000000
0000d9 d0da      	RCALL __ADDF12
0000da d06d      	RCALL __CFD1U
0000db 014f      	MOVW R8,R30
                 ; 0000 0070 
                 ; 0000 0071          PORTD=0x04;
0000dc e0e4      	LDI  R30,LOW(4)
0000dd d014      	RCALL SUBOPT_0x0
                 ; 0000 0072         PORTC=tabla7segmentos[f%10];//unidades
0000de d018      	RCALL SUBOPT_0x1
                 ; 0000 0073         delay_ms(500);
                 ; 0000 0074          //delay_ms(50);
                 ; 0000 0075 
                 ; 0000 0076         PORTD=0x02;
0000df e0e2      	LDI  R30,LOW(2)
0000e0 d011      	RCALL SUBOPT_0x0
                 ; 0000 0077         PORTC=tabla7segmentos[f/10];//decenas
0000e1 d1c2      	RCALL __DIVW21U
0000e2 d01e      	RCALL SUBOPT_0x2
                 ; 0000 0078         delay_ms(500);
                 ; 0000 0079          //delay_ms(50);
                 ; 0000 007A 
                 ; 0000 007B          PORTD=0x01;
0000e3 e0e1      	LDI  R30,LOW(1)
0000e4 bbe2      	OUT  0x12,R30
                 ; 0000 007C          PORTC=tabla7segmentos[f/100];//centenas
0000e5 01d4      	MOVW R26,R8
0000e6 e6e4      	LDI  R30,LOW(100)
0000e7 e0f0      	LDI  R31,HIGH(100)
0000e8 c005      	RJMP _0x18
                 ; 0000 007D          delay_ms(500);
                 ; 0000 007E          //delay_ms(50);
                 ; 0000 007F 
                 ; 0000 0080       }else{ //CELSIUS
                 _0x14:
                 ; 0000 0081          PORTD=0x02;
0000e9 e0e2      	LDI  R30,LOW(2)
0000ea d01f      	RCALL SUBOPT_0x3
                 ; 0000 0082          PORTC=tabla7segmentos[cn%10];//decenas
0000eb d00b      	RCALL SUBOPT_0x1
                 ; 0000 0083          delay_ms(500);
                 ; 0000 0084          //delay_ms(50);
                 ; 0000 0085 
                 ; 0000 0086          PORTD=0x01;
0000ec e0e1      	LDI  R30,LOW(1)
0000ed d01c      	RCALL SUBOPT_0x3
                 ; 0000 0087          PORTC=tabla7segmentos[cn/10];//unidades
                 _0x18:
0000ee d1b5      	RCALL __DIVW21U
0000ef d011      	RCALL SUBOPT_0x2
                 ; 0000 0088          delay_ms(500);
                 ; 0000 0089          //delay_ms(50);
                 ; 0000 008A       }
                 ; 0000 008B 
                 ; 0000 008C 
                 ; 0000 008D 
                 ; 0000 008E       }
0000f0 cfa1      	RJMP _0x7
                 ; 0000 008F }
                 _0x16:
0000f1 cfff      	RJMP _0x16
                 
                 	.DSEG
                 _tabla7segmentos:
0000e0           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0000f2 bbe2      	OUT  0x12,R30
0000f3 01d4      	MOVW R26,R8
0000f4 e0ea      	LDI  R30,LOW(10)
0000f5 e0f0      	LDI  R31,HIGH(10)
0000f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0000f7 d1bf      	RCALL __MODW21U
0000f8 52e0      	SUBI R30,LOW(-_tabla7segmentos)
0000f9 4fff      	SBCI R31,HIGH(-_tabla7segmentos)
0000fa 81e0      	LD   R30,Z
0000fb bbe5      	OUT  0x15,R30
0000fc efe4      	LDI  R30,LOW(500)
0000fd e0f1      	LDI  R31,HIGH(500)
0000fe 93fa      	ST   -Y,R31
0000ff 93ea      	ST   -Y,R30
000100 c00e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
000101 52e0      	SUBI R30,LOW(-_tabla7segmentos)
000102 4fff      	SBCI R31,HIGH(-_tabla7segmentos)
000103 81e0      	LD   R30,Z
000104 bbe5      	OUT  0x15,R30
000105 efe4      	LDI  R30,LOW(500)
000106 e0f1      	LDI  R31,HIGH(500)
000107 93fa      	ST   -Y,R31
000108 93ea      	ST   -Y,R30
000109 c005      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00010a bbe2      	OUT  0x12,R30
00010b 01d3      	MOVW R26,R6
00010c e0ea      	LDI  R30,LOW(10)
00010d e0f0      	LDI  R31,HIGH(10)
00010e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00010f 91e9      	ld   r30,y+
000110 91f9      	ld   r31,y+
000111 9630      	adiw r30,0
000112 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000113 ef8a     +LDI R24 , LOW ( 0xFA )
000114 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000115 9701     +SBIW R24 , 1
000116 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000117 95a8      	wdr
000118 9731      	sbiw r30,1
000119 f7c9      	brne __delay_ms0
                 __delay_ms1:
00011a 9508      	ret
                 
                 __ROUND_REPACK:
00011b 2355      	TST  R21
00011c f442      	BRPL __REPACK
00011d 3850      	CPI  R21,0x80
00011e f411      	BRNE __ROUND_REPACK0
00011f ffe0      	SBRS R30,0
000120 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000121 9631      	ADIW R30,1
000122 1f69      	ADC  R22,R25
000123 1f79      	ADC  R23,R25
000124 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000125 e850      	LDI  R21,0x80
000126 2757      	EOR  R21,R23
000127 f411      	BRNE __REPACK0
000128 935f      	PUSH R21
000129 c0c8      	RJMP __ZERORES
                 __REPACK0:
00012a 3f5f      	CPI  R21,0xFF
00012b f031      	BREQ __REPACK1
00012c 0f66      	LSL  R22
00012d 0c00      	LSL  R0
00012e 9557      	ROR  R21
00012f 9567      	ROR  R22
000130 2f75      	MOV  R23,R21
000131 9508      	RET
                 __REPACK1:
000132 935f      	PUSH R21
000133 2000      	TST  R0
000134 f00a      	BRMI __REPACK2
000135 c0c8      	RJMP __MAXRES
                 __REPACK2:
000136 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000137 e850      	LDI  R21,0x80
000138 2e19      	MOV  R1,R25
000139 2215      	AND  R1,R21
00013a 0f88      	LSL  R24
00013b 1f99      	ROL  R25
00013c 2795      	EOR  R25,R21
00013d 0f55      	LSL  R21
00013e 9587      	ROR  R24
                 
                 __UNPACK1:
00013f e850      	LDI  R21,0x80
000140 2e07      	MOV  R0,R23
000141 2205      	AND  R0,R21
000142 0f66      	LSL  R22
000143 1f77      	ROL  R23
000144 2775      	EOR  R23,R21
000145 0f55      	LSL  R21
000146 9567      	ROR  R22
000147 9508      	RET
                 
                 __CFD1U:
000148 9468      	SET
000149 c001      	RJMP __CFD1U0
                 __CFD1:
00014a 94e8      	CLT
                 __CFD1U0:
00014b 935f      	PUSH R21
00014c dff2      	RCALL __UNPACK1
00014d 3870      	CPI  R23,0x80
00014e f018      	BRLO __CFD10
00014f 3f7f      	CPI  R23,0xFF
000150 f408      	BRCC __CFD10
000151 c0a0      	RJMP __ZERORES
                 __CFD10:
000152 e156      	LDI  R21,22
000153 1b57      	SUB  R21,R23
000154 f4aa      	BRPL __CFD11
000155 9551      	NEG  R21
000156 3058      	CPI  R21,8
000157 f40e      	BRTC __CFD19
000158 3059      	CPI  R21,9
                 __CFD19:
000159 f030      	BRLO __CFD17
00015a efef      	SER  R30
00015b efff      	SER  R31
00015c ef6f      	SER  R22
00015d e77f      	LDI  R23,0x7F
00015e f977      	BLD  R23,7
00015f c01a      	RJMP __CFD15
                 __CFD17:
000160 2777      	CLR  R23
000161 2355      	TST  R21
000162 f0b9      	BREQ __CFD15
                 __CFD18:
000163 0fee      	LSL  R30
000164 1fff      	ROL  R31
000165 1f66      	ROL  R22
000166 1f77      	ROL  R23
000167 955a      	DEC  R21
000168 f7d1      	BRNE __CFD18
000169 c010      	RJMP __CFD15
                 __CFD11:
00016a 2777      	CLR  R23
                 __CFD12:
00016b 3058      	CPI  R21,8
00016c f028      	BRLO __CFD13
00016d 2fef      	MOV  R30,R31
00016e 2ff6      	MOV  R31,R22
00016f 2f67      	MOV  R22,R23
000170 5058      	SUBI R21,8
000171 cff9      	RJMP __CFD12
                 __CFD13:
000172 2355      	TST  R21
000173 f031      	BREQ __CFD15
                 __CFD14:
000174 9576      	LSR  R23
000175 9567      	ROR  R22
000176 95f7      	ROR  R31
000177 95e7      	ROR  R30
000178 955a      	DEC  R21
000179 f7d1      	BRNE __CFD14
                 __CFD15:
00017a 2000      	TST  R0
00017b f40a      	BRPL __CFD16
00017c d11a      	RCALL __ANEGD1
                 __CFD16:
00017d 915f      	POP  R21
00017e 9508      	RET
                 
                 __CDF1U:
00017f 9468      	SET
000180 c001      	RJMP __CDF1U0
                 __CDF1:
000181 94e8      	CLT
                 __CDF1U0:
000182 9730      	SBIW R30,0
000183 4060      	SBCI R22,0
000184 4070      	SBCI R23,0
000185 f0b1      	BREQ __CDF10
000186 2400      	CLR  R0
000187 f026      	BRTS __CDF11
000188 2377      	TST  R23
000189 f412      	BRPL __CDF11
00018a 9400      	COM  R0
00018b d10b      	RCALL __ANEGD1
                 __CDF11:
00018c 2e17      	MOV  R1,R23
00018d e17e      	LDI  R23,30
00018e 2011      	TST  R1
                 __CDF12:
00018f f032      	BRMI __CDF13
000190 957a      	DEC  R23
000191 0fee      	LSL  R30
000192 1fff      	ROL  R31
000193 1f66      	ROL  R22
000194 1c11      	ROL  R1
000195 cff9      	RJMP __CDF12
                 __CDF13:
000196 2fef      	MOV  R30,R31
000197 2ff6      	MOV  R31,R22
000198 2d61      	MOV  R22,R1
000199 935f      	PUSH R21
00019a df8a      	RCALL __REPACK
00019b 915f      	POP  R21
                 __CDF10:
00019c 9508      	RET
                 
                 __SWAPACC:
00019d 934f      	PUSH R20
00019e 01af      	MOVW R20,R30
00019f 01fd      	MOVW R30,R26
0001a0 01da      	MOVW R26,R20
0001a1 01ab      	MOVW R20,R22
0001a2 01bc      	MOVW R22,R24
0001a3 01ca      	MOVW R24,R20
0001a4 2d40      	MOV  R20,R0
0001a5 2c01      	MOV  R0,R1
0001a6 2e14      	MOV  R1,R20
0001a7 914f      	POP  R20
0001a8 9508      	RET
                 
                 __UADD12:
0001a9 0fea      	ADD  R30,R26
0001aa 1ffb      	ADC  R31,R27
0001ab 1f68      	ADC  R22,R24
0001ac 9508      	RET
                 
                 __NEGMAN1:
0001ad 95e0      	COM  R30
0001ae 95f0      	COM  R31
0001af 9560      	COM  R22
0001b0 5fef      	SUBI R30,-1
0001b1 4fff      	SBCI R31,-1
0001b2 4f6f      	SBCI R22,-1
0001b3 9508      	RET
                 
                 __ADDF12:
0001b4 935f      	PUSH R21
0001b5 df81      	RCALL __UNPACK
0001b6 3890      	CPI  R25,0x80
0001b7 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0001b8 3870      	CPI  R23,0x80
0001b9 f121      	BREQ __ADDF128
                 __ADDF121:
0001ba 2f57      	MOV  R21,R23
0001bb 1b59      	SUB  R21,R25
0001bc f12b      	BRVS __ADDF1211
0001bd f412      	BRPL __ADDF122
0001be dfde      	RCALL __SWAPACC
0001bf cffa      	RJMP __ADDF121
                 __ADDF122:
0001c0 3158      	CPI  R21,24
0001c1 f018      	BRLO __ADDF123
0001c2 27aa      	CLR  R26
0001c3 27bb      	CLR  R27
0001c4 2788      	CLR  R24
                 __ADDF123:
0001c5 3058      	CPI  R21,8
0001c6 f028      	BRLO __ADDF124
0001c7 2fab      	MOV  R26,R27
0001c8 2fb8      	MOV  R27,R24
0001c9 2788      	CLR  R24
0001ca 5058      	SUBI R21,8
0001cb cff9      	RJMP __ADDF123
                 __ADDF124:
0001cc 2355      	TST  R21
0001cd f029      	BREQ __ADDF126
                 __ADDF125:
0001ce 9586      	LSR  R24
0001cf 95b7      	ROR  R27
0001d0 95a7      	ROR  R26
0001d1 955a      	DEC  R21
0001d2 f7d9      	BRNE __ADDF125
                 __ADDF126:
0001d3 2d50      	MOV  R21,R0
0001d4 2551      	EOR  R21,R1
0001d5 f072      	BRMI __ADDF127
0001d6 dfd2      	RCALL __UADD12
0001d7 f438      	BRCC __ADDF129
0001d8 9567      	ROR  R22
0001d9 95f7      	ROR  R31
0001da 95e7      	ROR  R30
0001db 9573      	INC  R23
0001dc f413      	BRVC __ADDF129
0001dd c020      	RJMP __MAXRES
                 __ADDF128:
0001de dfbe      	RCALL __SWAPACC
                 __ADDF129:
0001df df45      	RCALL __REPACK
0001e0 915f      	POP  R21
0001e1 9508      	RET
                 __ADDF1211:
0001e2 f7d8      	BRCC __ADDF128
0001e3 cffb      	RJMP __ADDF129
                 __ADDF127:
0001e4 1bea      	SUB  R30,R26
0001e5 0bfb      	SBC  R31,R27
0001e6 0b68      	SBC  R22,R24
0001e7 f051      	BREQ __ZERORES
0001e8 f410      	BRCC __ADDF1210
0001e9 9400      	COM  R0
0001ea dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0001eb 2366      	TST  R22
0001ec f392      	BRMI __ADDF129
0001ed 0fee      	LSL  R30
0001ee 1fff      	ROL  R31
0001ef 1f66      	ROL  R22
0001f0 957a      	DEC  R23
0001f1 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0001f2 27ee      	CLR  R30
0001f3 27ff      	CLR  R31
0001f4 2766      	CLR  R22
0001f5 2777      	CLR  R23
0001f6 915f      	POP  R21
0001f7 9508      	RET
                 
                 __MINRES:
0001f8 efef      	SER  R30
0001f9 efff      	SER  R31
0001fa e76f      	LDI  R22,0x7F
0001fb ef7f      	SER  R23
0001fc 915f      	POP  R21
0001fd 9508      	RET
                 
                 __MAXRES:
0001fe efef      	SER  R30
0001ff efff      	SER  R31
000200 e76f      	LDI  R22,0x7F
000201 e77f      	LDI  R23,0x7F
000202 915f      	POP  R21
000203 9508      	RET
                 
                 __MULF12:
000204 935f      	PUSH R21
000205 df31      	RCALL __UNPACK
000206 3870      	CPI  R23,0x80
000207 f351      	BREQ __ZERORES
000208 3890      	CPI  R25,0x80
000209 f341      	BREQ __ZERORES
00020a 2401      	EOR  R0,R1
00020b 9408      	SEC
00020c 1f79      	ADC  R23,R25
00020d f423      	BRVC __MULF124
00020e f31c      	BRLT __ZERORES
                 __MULF125:
00020f 2000      	TST  R0
000210 f33a      	BRMI __MINRES
000211 cfec      	RJMP __MAXRES
                 __MULF124:
000212 920f      	PUSH R0
000213 931f      	PUSH R17
000214 932f      	PUSH R18
000215 933f      	PUSH R19
000216 934f      	PUSH R20
000217 2711      	CLR  R17
000218 2722      	CLR  R18
000219 2799      	CLR  R25
00021a 9f68      	MUL  R22,R24
00021b 01a0      	MOVW R20,R0
00021c 9f8f      	MUL  R24,R31
00021d 2d30      	MOV  R19,R0
00021e 0d41      	ADD  R20,R1
00021f 1f59      	ADC  R21,R25
000220 9f6b      	MUL  R22,R27
000221 0d30      	ADD  R19,R0
000222 1d41      	ADC  R20,R1
000223 1f59      	ADC  R21,R25
000224 9f8e      	MUL  R24,R30
000225 d027      	RCALL __MULF126
000226 9fbf      	MUL  R27,R31
000227 d025      	RCALL __MULF126
000228 9f6a      	MUL  R22,R26
000229 d023      	RCALL __MULF126
00022a 9fbe      	MUL  R27,R30
00022b d01d      	RCALL __MULF127
00022c 9faf      	MUL  R26,R31
00022d d01b      	RCALL __MULF127
00022e 9fae      	MUL  R26,R30
00022f 0d11      	ADD  R17,R1
000230 1f29      	ADC  R18,R25
000231 1f39      	ADC  R19,R25
000232 1f49      	ADC  R20,R25
000233 1f59      	ADC  R21,R25
000234 2fe3      	MOV  R30,R19
000235 2ff4      	MOV  R31,R20
000236 2f65      	MOV  R22,R21
000237 2f52      	MOV  R21,R18
000238 914f      	POP  R20
000239 913f      	POP  R19
00023a 912f      	POP  R18
00023b 911f      	POP  R17
00023c 900f      	POP  R0
00023d 2366      	TST  R22
00023e f02a      	BRMI __MULF122
00023f 0f55      	LSL  R21
000240 1fee      	ROL  R30
000241 1fff      	ROL  R31
000242 1f66      	ROL  R22
000243 c002      	RJMP __MULF123
                 __MULF122:
000244 9573      	INC  R23
000245 f24b      	BRVS __MULF125
                 __MULF123:
000246 ded4      	RCALL __ROUND_REPACK
000247 915f      	POP  R21
000248 9508      	RET
                 
                 __MULF127:
000249 0d10      	ADD  R17,R0
00024a 1d21      	ADC  R18,R1
00024b 1f39      	ADC  R19,R25
00024c c002      	RJMP __MULF128
                 __MULF126:
00024d 0d20      	ADD  R18,R0
00024e 1d31      	ADC  R19,R1
                 __MULF128:
00024f 1f49      	ADC  R20,R25
000250 1f59      	ADC  R21,R25
000251 9508      	RET
                 
                 __DIVF21:
000252 935f      	PUSH R21
000253 dee3      	RCALL __UNPACK
000254 3870      	CPI  R23,0x80
000255 f421      	BRNE __DIVF210
000256 2011      	TST  R1
                 __DIVF211:
000257 f40a      	BRPL __DIVF219
000258 cf9f      	RJMP __MINRES
                 __DIVF219:
000259 cfa4      	RJMP __MAXRES
                 __DIVF210:
00025a 3890      	CPI  R25,0x80
00025b f409      	BRNE __DIVF218
                 __DIVF217:
00025c cf95      	RJMP __ZERORES
                 __DIVF218:
00025d 2401      	EOR  R0,R1
00025e 9408      	SEC
00025f 0b97      	SBC  R25,R23
000260 f41b      	BRVC __DIVF216
000261 f3d4      	BRLT __DIVF217
000262 2000      	TST  R0
000263 cff3      	RJMP __DIVF211
                 __DIVF216:
000264 2f79      	MOV  R23,R25
000265 931f      	PUSH R17
000266 932f      	PUSH R18
000267 933f      	PUSH R19
000268 934f      	PUSH R20
000269 2411      	CLR  R1
00026a 2711      	CLR  R17
00026b 2722      	CLR  R18
00026c 2733      	CLR  R19
00026d 2744      	CLR  R20
00026e 2755      	CLR  R21
00026f e290      	LDI  R25,32
                 __DIVF212:
000270 17ae      	CP   R26,R30
000271 07bf      	CPC  R27,R31
000272 0786      	CPC  R24,R22
000273 0741      	CPC  R20,R17
000274 f030      	BRLO __DIVF213
000275 1bae      	SUB  R26,R30
000276 0bbf      	SBC  R27,R31
000277 0b86      	SBC  R24,R22
000278 0b41      	SBC  R20,R17
000279 9408      	SEC
00027a c001      	RJMP __DIVF214
                 __DIVF213:
00027b 9488      	CLC
                 __DIVF214:
00027c 1f55      	ROL  R21
00027d 1f22      	ROL  R18
00027e 1f33      	ROL  R19
00027f 1c11      	ROL  R1
000280 1faa      	ROL  R26
000281 1fbb      	ROL  R27
000282 1f88      	ROL  R24
000283 1f44      	ROL  R20
000284 959a      	DEC  R25
000285 f751      	BRNE __DIVF212
000286 01f9      	MOVW R30,R18
000287 2d61      	MOV  R22,R1
000288 914f      	POP  R20
000289 913f      	POP  R19
00028a 912f      	POP  R18
00028b 911f      	POP  R17
00028c 2366      	TST  R22
00028d f032      	BRMI __DIVF215
00028e 0f55      	LSL  R21
00028f 1fee      	ROL  R30
000290 1fff      	ROL  R31
000291 1f66      	ROL  R22
000292 957a      	DEC  R23
000293 f243      	BRVS __DIVF217
                 __DIVF215:
000294 de86      	RCALL __ROUND_REPACK
000295 915f      	POP  R21
000296 9508      	RET
                 
                 __ANEGD1:
000297 95f0      	COM  R31
000298 9560      	COM  R22
000299 9570      	COM  R23
00029a 95e1      	NEG  R30
00029b 4fff      	SBCI R31,-1
00029c 4f6f      	SBCI R22,-1
00029d 4f7f      	SBCI R23,-1
00029e 9508      	RET
                 
                 __CWD1:
00029f 2f6f      	MOV  R22,R31
0002a0 0f66      	ADD  R22,R22
0002a1 0b66      	SBC  R22,R22
0002a2 2f76      	MOV  R23,R22
0002a3 9508      	RET
                 
                 __DIVW21U:
0002a4 2400      	CLR  R0
0002a5 2411      	CLR  R1
0002a6 e190      	LDI  R25,16
                 __DIVW21U1:
0002a7 0faa      	LSL  R26
0002a8 1fbb      	ROL  R27
0002a9 1c00      	ROL  R0
0002aa 1c11      	ROL  R1
0002ab 1a0e      	SUB  R0,R30
0002ac 0a1f      	SBC  R1,R31
0002ad f418      	BRCC __DIVW21U2
0002ae 0e0e      	ADD  R0,R30
0002af 1e1f      	ADC  R1,R31
0002b0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002b1 60a1      	SBR  R26,1
                 __DIVW21U3:
0002b2 959a      	DEC  R25
0002b3 f799      	BRNE __DIVW21U1
0002b4 01fd      	MOVW R30,R26
0002b5 01d0      	MOVW R26,R0
0002b6 9508      	RET
                 
                 __MODW21U:
0002b7 dfec      	RCALL __DIVW21U
0002b8 01fd      	MOVW R30,R26
0002b9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :  33 r1 :  25 r2 :   6 r3 :   0 r4 :   4 r5 :   3 r6 :   3 r7 :   0 
r8 :   3 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:  10 r18:  12 r19:  12 r20:  22 r21:  60 r22:  50 r23:  40 
r24:  32 r25:  33 r26:  34 r27:  19 r28:   2 r29:   1 r30: 136 r31:  50 
x  :   3 y  :   8 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   8 
adiw  :   3 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   2 brmi  :   7 brne  :  17 brpl  :   6 brsh  :   0 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 cbi   :   0 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  28 
cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   8 cp    :   2 
cpc   :   4 cpi   :  16 cpse  :   0 dec   :  10 des   :   0 eor   :   6 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   2 ld    :   5 ldd   :   0 ldi   :  82 lds   :   0 lpm   :   7 
lsl   :  12 lsr   :   2 mov   :  27 movw  :  23 mul   :   9 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   1 ori   :   1 out   :  50 
pop   :  18 push  :  17 rcall :  42 ret   :  22 reti  :   0 rjmp  :  58 
rol   :  27 ror   :  12 sbc   :   8 sbci  :   9 sbi   :   2 sbic  :   1 
sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   2 sbrs  :   2 sec   :   3 
seh   :   0 sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   3 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   8 std   :   0 
sts   :   0 sub   :   5 subi  :   5 swap  :   0 tst   :  14 wdr   :   1 

Instructions used: 66 out of 114 (57.9%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000574   1362     34   1396    8192  17.0%
[.dseg] 0x000060 0x0000ea      0     10     10     607   1.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
